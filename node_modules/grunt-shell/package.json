{
  "name": "grunt-shell",
  "version": "0.3.1",
  "description": "Run shell commands",
  "keywords": [
    "gruntplugin",
    "shell",
    "command",
    "cmd",
    "exec",
    "spawn",
    "process",
    "cli"
  ],
  "homepage": "https://github.com/sindresorhus/grunt-shell",
  "bugs": {
    "url": "https://github.com/sindresorhus/grunt-shell/issues"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "http://sindresorhus.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sindresorhus/grunt-shell.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "dependencies": {
    "stripcolorcodes": "~0.1.0"
  },
  "devDependencies": {
    "grunt": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "licenses": {
    "type": "MIT"
  },
  "files": [
    "tasks/shell.js"
  ],
  "readme": "# grunt-shell\n\n*Requires grunt 0.4. Use version 0.1.4 for grunt 0.3 compatibility*\n\n[Grunt][grunt] task to run shell commands.\n\nA good way to interact with other CLI tools. E.g. compiling Compass `compass compile` or get the current git branch `git branch`.\n\n\n## Getting Started\n\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install --save-dev grunt-shell\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-shell');\n```\n\n[grunt]: http://gruntjs.com\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\n\n\n## Documentation\n\n\n### Example usage\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```javascript\nshell: {\n\tmakeDir: {\n\t\tcommand: 'mkdir test'\n\t}\n}\n```\n\nThe `command` property supports templates:\n\n```javascript\ntestDir: 'test',\nshell: {\n\tmakeDir: {\n\t\tcommand: 'mkdir <%= testDir %>'\n\t}\n}\n```\n\nYou can also supply a function that returns the command:\n\n```javascript\nshell: {\n\tmakeDir: {\n\t\tcommand: function () {\n\t\t\treturn 'echo hello';\n\t\t}\n\t}\n}\n```\n\n\n#### Run command and display the output\n\nOutput a directory listing in your Terminal.\n\n```javascript\nshell: {\n\tdirListing: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tstdout: true\n\t\t}\n\t}\n}\n```\n\n\n#### Custom callback\n\nDo whatever you want with the output.\n\n```javascript\nfunction log(err, stdout, stderr, cb) {\n\tconsole.log(stdout);\n\tcb();\n}\n\n...\n\nshell: {\n\tdirListing: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tcallback: log\n\t\t}\n\t}\n}\n```\n\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` (current working directory) option.\n\n```javascript\nshell: {\n\tsubfolderLs: {\n\t\tcommand: 'ls',\n\t\toptions: {\n\t\t\tstdout: true,\n\t\t\texecOptions: {\n\t\t\t\tcwd: 'tasks'\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\n#### Multiple commands\n\nRun multiple commands by placing them in an array which is joined using `&&` or `;`. `&&` means run this only if the previous command succeded. You can also use `&` to have the commands run concurrently (by executing all commands except the last one in a subshell).\n\n```javascript\nshell: {\n\tmultiple: {\n\t\tcommand: [\n\t\t\t'mkdir test',\n\t\t\t'cd test',\n\t\t\t'ls'\n\t\t].join('&&')\n\t}\n}\n```\n\n\n### Config\n\n\n#### command\n\n**Required**  \nType: `String|Function`\n\nThe command you want to run or a function which returns it. Supports underscore templates.\n\n\n### Options\n\n\n#### stdout\n\nDefault: `false`  \nType: `Boolean`\n\nShow stdout in the Terminal.\n\n\n#### stderr\n\nDefault: `false`  \nType: `Boolean`\n\nShow stderr in the Terminal.\n\n\n#### failOnError\n\nDefault: `false`  \nType: `Boolean`\n\nFail task if it encounters an error. Does not apply if you specify a `callback`.\n\n\n#### callback(err, stdout, stderr, cb)\n\nDefault: `function () {}`  \nType: `Function`\n\nLets you override the default callback with your own.\n\n**Make sure to call the `cb` method when you're done.**\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n## Upgrade from 0.1.4 to 0.2.0\n\nBecause of the transition to grunt 0.4 there are some changes. To conform to new grunt standards, all options are now to be specified in an `options` object. I also took the opportunity to improve the task. The `stdout` and `stderr` options now only supports a boolean. If you want to do something with the result use the `callback` option. The `callback` option also changed.\n\n\n## Tests\n\nGrunt currently doesn't have a way to test tasks directly. You can test this task by running `grunt` and manually verify that it works.\n\n\n## License\n\nMIT License • © [Sindre Sorhus](http://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "_id": "grunt-shell@0.3.1",
  "_from": "grunt-shell@~0.3.1"
}
